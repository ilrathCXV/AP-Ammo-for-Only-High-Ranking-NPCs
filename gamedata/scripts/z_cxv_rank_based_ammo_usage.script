local enable_mod = z_cxv_rank_based_ammo_usage_mcm.get_config("enabled")
local nerf_bs = z_cxv_rank_based_ammo_usage_mcm.get_config("nerf_bs")
local nerf_mm = z_cxv_rank_based_ammo_usage_mcm.get_config("nerf_mm")
local buff_south_after_bs = z_cxv_rank_based_ammo_usage_mcm.get_config("buff_south_after_bs")
local adjust_ammo_loot = z_cxv_rank_based_ammo_usage_mcm.get_config("adjust_ammo_loot")
local print_debug = z_cxv_rank_based_ammo_usage_mcm.get_config("print_debug")

local adjust_npc_tbl = {}
local ini_ammo_convert = ini_file("rank_ammo\\importer.ltx")
local npc_rank = ranks.get_obj_rank_name	--(obj by ID)
local location_name

local function print_dbg(...)
	if print_debug then printf(...) end
end

map_rank_modifiers = {
	-- Southern Maps
	["k00_marsh"] = -1,
	["l01_escape"] = -2,
	["l02_garbage"] = -2,
	["y04_pole"] = -2,
	["l05_bar"] = -1,
	["l06_rostok"] = -1,
	
	-- Mid-Maps + Darkscape
	["l03_agroprom"] = -1,
	["k01_darkscape"] = -1,
	["l04_darkvalley"] = -1,
	["k02_trucks_cemetery"] = -1,
	["l07_military"] = -1,
	["l09_deadcity"] = -1,
	["l08_yantar"] = -1,
	
	-- Mid-Northern Maps
	["jupiter"] = 0,
	["l10_limansk"] = 0,
	["l10_radar"] = 0,
	["l10_red_forest"] = 0,
	
	-- North Maps
	["zaton"] = 1,
	["l11_hospital"] = 1,
	["pripyat"] = 1,
	["l11_pripyat"] = 1,
	
	-- Most Northern Maps
	["l13_generators"] = 2,
	["l12_stancia"] = 1,
	["l12_stancia_2"] = 1,
	
	-- Labs
	["l03u_agr_underground"] = 0,
	["l08u_brainlab"] = 0,
	["l04u_labx18"] = 0,
	["labx8"] = 0,
	["l10u_bunker"] = 0,
	["l12u_control_monolith"] = 2,
	["l12u_sarcofag"] = 2,
	["l13u_warlab"] = 2,
}

local map_faction_exemptions = {
	["k00_marsh"] = "csky",
	["l05_bar"] = "dolg",
	["l06_rostok"] = "dolg",
	["l03_agroprom"] = "army",
	["l04_darkvalley"] = "bandit",
	["l07_military"] = "freedom",
	["l09_deadcity"] = "killer",
	["l08_yantar"] = "ecologist",
}

-- essentially an enum table to be used - see importer.ltx for logic
rank_table_rating = {
	["novice"] = 1,
	["trainee"] = 2,
	["experienced"] = 3,
	["professional"] = 4,
	["veteran"] = 5,
	["expert"] = 6,
	["master"] = 7,
	["legend"] = 8,
	
	-- for anyone trying to use the DLTX mod "Ranks Overhaul"
	["apprentice"] = 1,
	["survivor"] = 2,
	["skilled"] = 3,
	["zone_elite"] = 7,
	["zone_legend"] = 8,
	["zone_mystic"] = 8
}

-- Certai factions get a bonus/penalty to their rank enum
faction_rank_adjust = {
	["zombied"] = -2,
	["zombified"] = -2,
	["bandit"] = -1,
	["monolith"] = 0,
	["greh"] = 1,
	["isg"] = 2
}

-- Special edge case since they only use PKM and x54r AP ammo - will need to check if "ammo_pkm_100" is in their ammo table
local pkm_check = {
	["wpn_pkm"] = true,
	["wpn_pkm_zulus"] = true,
	["wpn_pkm_siber"] = true,
	["wpn_pkm_zenit_shorty"] = true,
	["wpn_pkm_zenit_siber"] = true,
}

-- Copied from hxf_tough_important_npcs.script
function Set(t)
  local s = {}
  for _,v in pairs(t) do s[v] = true end
  return s
end

local IMPORTANT_NPC_SECTIONS = Set {

								--[[ CORDON ]]--

	"esc_2_12_stalker_nimble",									-- Nimble
	"esc_2_12_stalker_wolf",									-- Wolf
	"esc_2_12_stalker_fanat",									-- Fanatic
	"esc_2_12_stalker_trader", 									-- Sidorovich
	"esc_smart_terrain_5_7_loner_mechanic_stalker", 			-- Xenotech
	"devushka", 												-- Hip
	"esc_main_base_trader_mlr",									-- Loris
	"esc_3_16_military_trader",									-- Major Zhurov
	"army_south_mechan_mlr",									-- Seryoga

								--[[ GREAT SWAMPS ]]--

	"mar_smart_terrain_doc_doctor",								-- Doctor
	"mar_smart_terrain_base_stalker_leader_marsh",				-- Cold
	"mar_base_stalker_tech",									-- Novikov
	"mar_base_owl_stalker_trader",								-- Spore
	"mar_smart_terrain_base_doctor",							-- Professor Kalancha
	"guid_marsh_mlr",											-- Ivan Trodnik
	"mar_base_stalker_barmen",									-- Librarian
	
								--[[ DARKSCAPE ]]--
	
	"dasc_tech_mlr",											-- Polymer
	"dasc_trade_mlr",											-- Cutter
	"ds_domik_isg_leader",										-- Major Hernandez
	
								--[[ GARBAGE ]]--
	
	"hunter_gar_trader",										-- Butcher
	
								--[[ AGROPROM ]]--
	
	"agr_smart_terrain_1_6_near_2_military_colonel_kovalski",	-- Major Kuznetsov
	"agr_1_6_medic_army_mlr",									-- Rogovets
	"agr_smart_terrain_1_6_army_trader_stalker",				-- Sergeant Spooner
	"agr_1_6_barman_army_mlr",									-- Commander
	"agr_smart_terrain_1_6_army_mechanic_stalker",				-- Lieutenant Kirilov
	
								--[[ AGROPROM UNDERGROUND ]]--
	
	"agr_u_bandit_boss",										-- Reefer

								--[[ DARK VALLEY ]]--
	
	"zat_b7_bandit_boss_sultan",								-- Sultan
	"val_smart_terrain_7_3_bandit_mechanic_stalker",			-- Limpid
	"guid_dv_mal_mlr",											-- Pug
	"val_smart_terrain_7_4_bandit_trader_stalker",				-- Olivius
	
								--[[ ROSTOK ]]--
	
	"bar_visitors_barman_stalker_trader",						-- Barkeep
	"bar_visitors_zhorik_stalker_guard2",						-- Zhorik
	"bar_visitors_garik_stalker_guard",							-- Garik
	"bar_informator_mlr",										-- Snitch
	"guid_bar_stalker_navigator",								-- Navigator
	"bar_arena_manager",										-- Arnie
	"bar_arena_guard",											-- Liolik
	"bar_dolg_leader",											-- General Voronin
	"bar_dolg_general_petrenko_stalker", 						-- Colonel Petrenko
	"bar_dolg_medic", 											-- Aspirin
	"bar_visitors_stalker_mechanic",							-- Mangun
	"bar_zastava_2_commander",									-- Sergeant Kitsenko
	"bar_duty_security_squad_leader",							-- Captain Gavrilenko
	
								--[[ YANTAR ]]--
	
	"yan_stalker_sakharov", 									-- Professor Sakharov
	"mechanic_army_yan_mlr", 									-- Peregrine
	"yan_povar_army_mlr", 										-- Spirit
	"yan_ecolog_kruglov",										-- Professor Kruglov
	
								--[[ ARMY WAREHOUSES ]]--
	
	"mil_smart_terrain_7_7_freedom_leader_stalker", 			-- Lukash
	"mil_freedom_medic", 										-- Solid
	"mil_smart_terrain_7_10_freedom_trader_stalker", 			-- Skinflint
	"mil_smart_terrain_7_7_freedom_mechanic_stalker", 			-- Screw
	"mil_freedom_guid", 										-- Leshiy
	"stalker_gatekeeper", 										-- Gatekeeper
	
								--[[ DEAD CITY ]]--
	
	"cit_killers_merc_mechanic_stalker", 						-- Hog
	"cit_killers_merc_trader_stalker", 							-- Dushman
	"ds_killer_guide_main_base", 								-- Leopard
	"cit_killers_merc_barman_mlr", 								-- Aslan
	"cit_killers_merc_medic_stalker", 							-- Surgeon
	
								--[[ RED FOREST ]]--
	
	"red_forester_tech", 										-- Forester
	"red_greh_trader",											-- Stribog
	"red_greh_tech",											-- Dazhbog
	
								--[[ DESERTED HOSPITAL ]]--
	
	"kat_greh_sabaoth", 										-- Chernobog and variants
	"gen_greh_sabaoth",
	"sar_greh_sabaoth",
	
								--[[ JUPITER ]]--
	
	"jup_b220_trapper", 										-- Trapper
	"jup_a6_stalker_barmen", 									-- Hawaiian
	"guid_jup_stalker_garik", 									-- Garry
	"jup_a6_stalker_medik", 									-- Bonesetter
	"zat_a2_stalker_mechanic", 									-- Cardan
	"jup_b217_stalker_tech", 									-- Nitro
	"jup_a6_freedom_trader_ashot", 								-- Ashot
	"jup_a6_freedom_leader", 									-- Loki
	"jup_b6_scientist_tech", 									-- Tukarev
	"jup_b6_scientist_nuclear_physicist", 						-- Professor Hermann
	"jup_b6_scientist_biochemist", 								-- Professor Ozersky
	"jup_depo_isg_leader",										-- Major Hernandez
	"jup_cont_mech_bandit",										-- Nile
	"jup_cont_trader_bandit",									-- Klenov
	"jup_depo_isg_tech",										-- Lieutenant Maus
	"jup_a12_bandit_cashier",									-- Bandit Trader
	"jup_a12_bandit_guard",									-- Bandit Trader
	
								--[[ ZATON ]]--
	
	"zat_stancia_mech_merc", 									-- Kolin
	"zat_stancia_trader_merc", 									-- Vector
	"zat_a2_stalker_nimble", 									-- Nimble
	"zat_b30_owl_stalker_trader", 								-- Owl
	"zat_tech_mlr", 											-- Spleen
	"zat_b22_stalker_medic", 									-- Axel
	"zat_a2_stalker_barmen", 									-- Beard
	"zat_b18_noah", 											-- Noah
	"guid_zan_stalker_locman", 									-- Pilot
	"zat_b106_stalker_gonta",									-- Gonta
	"zat_b106_stalker_garmata", 								-- Garmata
	"zat_b106_stalker_crab", 									-- Crab
	"army_degtyarev_jup",                                      	-- Colonel Degtyarev and variants
	"army_degtyarev",
	"stalker_rogue",											-- Rogue and variants
	"stalker_rogue_ms",
	"stalker_rogue_oa",
	"zat_b7_stalker_victim_1",									-- Spartacus
	
								--[[ OUTSKIRTS ]]--
	
	"pri_monolith_monolith_trader_stalker", 					-- Krolik
	"lider_monolith_haron", 									-- Charon
	"pri_monolith_monolith_mechanic_stalker", 					-- Cleric
	"monolith_eidolon", 										-- Eidolon
	"guid_pri_a15_mlr", 										-- Tourist
	"trader_pri_a15_mlr", 										-- Cashier
	"pri_medic_stalker", 										-- Yar
	"merc_pri_a18_mech_mlr", 									-- Trunk
	"pri_special_trader_mlr", 									-- Meeker
	"merc_pri_grifon_mlr", 										-- Griffin
	"mechanic_monolith_kbo", 									-- Bracer
	"trader_monolith_kbo", 										-- Olivar
	"stalker_stitch", 											-- Stitch and variants
	"stalker_stitch_ms",
	"stalker_stitch_oa",
	"lost_stalker_strelok", 									-- Strelok and variants
	"stalker_strelok_hb",
	"stalker_strelok_oa",

}

local map_location_buffed = {}

function npc_on_net_spawn(npc)

	if not enable_mod then return end
	if not npc then return end

	if npc:id() and adjust_npc_tbl[npc:id()] then return end
	
	-- skip companions to avoid changing their ammo in case player adjusted their ammo types
	if npc:has_info("npcx_is_companion") then
		adjust_npc_tbl[npc:id()] = true
		return
	end
	
	-- skip important NPCs to avoid changing their loadouts (might change to an addition later down the line)
	if IMPORTANT_NPC_SECTIONS[npc:section()] then
		adjust_npc_tbl[npc:id()] = true
		return
	end
	
	local enemy = level.object_by_id(npc:id())
	if not enemy then return end
	
	local rank = npc_rank(enemy)
	if not rank then return end
	
	local rank_enum = rank_table_rating[rank] or 0
	if rank_enum == 0 then return end
	
	if not location_name then
		location_name = level.name()
	end
	
	local npc_comm = character_community(enemy)
	
	-- Monolith in Radar/BS that are not Master/Legend will be read as Experienced
	-- This will reduce most instances of more dangerous AP ammo from being used
	-- After BS is turned off, Monolith rank will be read as normal
	if nerf_bs and (rank_enum < 7) and (location_name == "l10_radar" or location_name == "l10u_bunker") and (npc_comm == "monolith") then
		if (not has_alife_info("bar_deactivate_radar_done")) then
			rank_enum = math.min(rank_enum, 3)
		end
	end
	
	-- Sin inside of Miracle Machine **before it is turned off** will read as Trainee/Experienced/Professional since it is early game (Grok why...?)
	-- Sin when doing Mortal Sin will be unaffected
	if nerf_mm and (location_name == "l08u_brainlab") and (npc_comm == "greh") then
		if (not has_alife_info("yan_labx16_switcher_primary_off")) then
			rank_enum = math.random(1,3)
		end
	end
	
	-- If Brain Scorcher is turned off, if a map modifier is less than 0, up it by 1
	if buff_south_after_bs and (not map_location_buffed[location_name]) then
		if map_rank_modifiers[location_name] and map_rank_modifiers[location_name] < 0 and has_alife_info("bar_deactivate_radar_done") then
			map_rank_modifiers[location_name] = map_rank_modifiers[location_name] + 1
			map_location_buffed[location_name] = true
		end
	end
	
	-- Ignore map negations if faction base is located in the map table
	if map_faction_exemptions[location_name] and (map_faction_exemptions[location_name] == npc_comm) and (map_rank_modifiers[location_name] < 0) then
		rank_enum = rank_enum + (faction_rank_adjust[npc_comm] or 0)
	else
		rank_enum = rank_enum + (faction_rank_adjust[npc_comm] or 0) + (map_rank_modifiers[location_name] or 0)
	end
	
	print_dbg("[Ammo Adjust] Adjusting for %s (Faction: %s | Rank: %s | Adj. Enum: %s | Faction Adj.: %s | Level Adj.: %s (%s))", npc and npc:name(), npc_comm, rank, rank_enum, faction_rank_adjust[npc_comm] or 0,
								map_rank_modifiers[location_name] or 0, (map_faction_exemptions[location_name] and map_faction_exemptions[location_name] == npc_comm))
	
	adjust_npc_tbl[npc:id()] = true
	
	CreateTimeEvent("cxv_ammo_type_adjust", npc:id(), 0.03, function()
		if npc:best_weapon() then
			try_adjust_ammo(npc:best_weapon(), rank_enum)
		end
		npc:iterate_inventory(function(t, item)
			if IsWeapon(item) then try_adjust_ammo(item, rank_enum) end
		end)
		return true
	end)
end

function try_adjust_ammo(wpn, rank_enum)
	if not wpn then return end
	if not rank_enum then return end
	
	local loop_count = 0
	
	local wpn_sec = ini_sys:r_string_ex(wpn:section(),"parent_section") or wpn:section()
    local ammo_data = utils_item.get_ammo(wpn:section(), wpn:id())
    if is_empty(ammo_data) then return end
	local ammo_data_inv = invert_table(ammo_data)
	
	local convert_ammo	-- the new ammo to convert to
    local ammo_type = ammo_data[wpn:get_ammo_type() + 1]
	local orig_type = ammo_type
	
	ammo_type = bad_ammo_adjust(ammo_type)
	
	-- Check if section exists in the ini_ammo_convert
	if not ini_ammo_convert:section_exist(ammo_type) then return end
	
--	local se_wpn = alife_object(wpn:id())
--	local data = utils_stpk.get_weapon_data(se_wpn)
	
	::ammo_recheck::
--	print_dbg("[Ammo Adjust] Loop check: %s", loop_count)
	
	local ap_rank = ini_ammo_convert:r_float_ex(ammo_type, "ap_rank", 0) or 0
	local fmj_rank = ini_ammo_convert:r_float_ex(ammo_type, "fmj_rank", 0) or 0
	
	-- Check if they are too high rank to be using FMJ/HP
	if ap_rank > 0 and rank_enum >= ap_rank then
		convert_ammo = ini_ammo_convert:r_string_ex(ammo_type, "ap_sec")
	end
	
	-- Check if they are too low rank to be using AP (skip if convert ammo was already selected)
	if fmj_rank > 0 and rank_enum <= fmj_rank then
		-- Edge case: check if it is using PKM ammo (get parent section to cut out scopes)
		if pkm_check[wpn_sec] or ammo_data_inv["ammo_pkm_100"] then
			convert_ammo = "ammo_pkm_100"
		else
			convert_ammo = ini_ammo_convert:r_string_ex(ammo_type, "fmj_sec")
		end
	end
	
	-- Try one more round of converting to see if we need to adjust again
	if (convert_ammo and convert_ammo ~= ammo_type) and loop_count < 2 then
		loop_count = loop_count + 1
		ammo_type = convert_ammo
		goto ammo_recheck
	end
	
	if (not convert_ammo) and (ammo_type ~= orig_type) then
		convert_ammo = ammo_type
	end
	
    if (convert_ammo and ammo_data_inv[convert_ammo]) then
        print_dbg("[Ammo Adjust] Adjusting ammo for %s (%s) from %s to %s | RANK: %s", wpn:section(), wpn:id(), orig_type, convert_ammo, rank_enum)
        local cnt = wpn:get_ammo_in_magazine()
		wpn:set_ammo_elapsed(0)
        wpn:unload_magazine(true)
		if magazines then
			local mag_data = magazine_binder.get_data(wpn:id())
			if mag_data then
				if #mag_data.loaded > 0 then
					local ammo_cap = SYS_GetParam(2, mag_data["section"], "max_mag_size")
					
					-- do this one more time in case something goes awry
					convert_ammo = bad_ammo_adjust(convert_ammo) or convert_ammo
					
					for i=1, ammo_cap do
						-- Apparently, enemy weapons are already given random amounts of ammo in the magazine for looting purposes
						-- So, we have to do a validity check here to ensure we don't get magazines full of ammo when looting
						if mag_data["loaded"][i] then
							mag_data["loaded"][i] = convert_ammo
						end
					end
					
					magazine_binder.set_data(wpn:id(), mag_data)
				end
			end
		end
        wpn:set_ammo_type(ammo_data_inv[convert_ammo] - 1)
        wpn:set_ammo_elapsed(cnt)
		
--		data.ammo_type = ammo_data_inv[convert_ammo] - 1
--		utils_stpk.set_weapon_data(data,se_wpn)
    end
end

local string_find   = string.find
local string_gsub   = string.gsub

function bad_ammo_adjust(ammo_sec)
	-- Replace damaged ammo with new
	if string_find(ammo_sec,"_verybad") then
		local new_section = string_gsub(ammo_sec,"_verybad","")
		if ini_sys:section_exist(new_section) then
			print_dbg("[Ammo Adjust] Very bad ammo was found (%s) ... switching to normal ammo (%s)", ammo_sec, new_section)
			return new_section
		end
	end
	
	-- Replace damaged ammo with new
	if string_find(ammo_sec,"_bad") then
		local new_section = string_gsub(ammo_sec,"_bad","")
		if ini_sys:section_exist(new_section) then
			print_dbg("[Ammo Adjust] Bad ammo was found (%s) ... switching to normal ammo (%s)", ammo_sec, new_section)
			return new_section
		end
	end
	
	return ammo_sec
end

BaseDMCreate = death_manager.alife_create_item
-- NPCs will spawn with the ammo in their current gun when looting
BaseDMTryAmmo = death_manager.try_spawn_ammo
function death_manager.try_spawn_ammo(npc)
	
	if (not enable_mod) and (not adjust_ammo_loot) then
		BaseDMTryAmmo(npc)
		return
	end
	
	local ammo_class,sec,number
	local function itr(npc,itm)
		if (IsWeapon(nil,itm:clsid()) and not npc:marked_dropped(itm)) then
			ammo_class = utils_item.get_ammo(itm:section(), itm:id())

			-- randomly spawn only 1 ammo type per found weapon
			if (#ammo_class > 0) then
				sec = ammo_class[itm:get_ammo_type() + 1]
				print_dbg("[Try Spawn Ammo] Ammo to be given: %s", sec)

				if (sec) then 
					if (death_manager.item_count[sec]) then
						number = math.random(death_manager.item_count[sec][1], death_manager.item_count[sec][2])
					else 
						number = 0
					end
					if (number > 0 and ini_sys:section_exist(sec)) then
						BaseDMCreate(sec, npc, {ammo = number})
					end
				end
			end
			
			-- spawn grenade ammo if there is launcher attached
			
			if (ini_sys:r_float_ex(itm:section(),"grenade_launcher_status") > 0) then
				ammo_class = parse_list(ini_sys,itm:section(),"grenade_class")
				for i=1,#ammo_class do
					sec = ammo_class[i]
					if (sec) then
						if (death_manager.item_count[sec]) then
							number = math.random(death_manager.item_count[sec][1], death_manager.item_count[sec][2])
						else 
							number = math.random(0,2)
						end
						if (number > 0 and ini_sys:section_exist(sec)) then 
							-- DPH_LOOT_COND
							if ui_mcm.get('dph_loot_cond/ammo/disable_bad') and sec:find('%_bad$') then
								sec = sec:sub(1, -5)
							end
							chance = math.random(0,100)
							if chance > 30 then
								local loot_factor = (ui_mcm and ui_mcm.get('dph_loot_cond/ammo/factor')) or 1
								BaseDMCreate(sec, npc, {ammo = (number * loot_factor)})
							end
							-- DPH_LOOT_COND
						end
					end
				end
			end
		end
	end
	npc:iterate_inventory(itr,npc)
	
	CreateTimeEvent(npc:id(), "npc_ammo_aggregation", 0, item_weapon.ammo_aggregation_full, npc:id())
end

local weapon_item = nil
local npc_death = false

local cond_item = nil
local setting_wpn = false

BaseDeathWpnCond = death_manager.set_weapon_drop_condition
function death_manager.set_weapon_drop_condition(npc,itm)
	
	-- ensure to reset the variable to avoid incorrect ammo in the magazines (Mags users)
	cond_item = nil
	
	if (not enable_mod) and (not adjust_ammo_loot) then
		BaseDeathWpnCond(npc,itm)
		return
	end
	
	local rank = ranks.get_obj_rank_name(npc)
	local condition = 10
	if npc:character_community() ~= "zombied" then
		condition = math.random( death_manager.weapon_drop_condition[rank][1] , death_manager.weapon_drop_condition[rank][2] )
	else
		condition = math.random( death_manager.weapon_drop_condition["novice"][1] , death_manager.weapon_drop_condition["novice"][2] )
	end
	
	condition = clamp(condition,5,100)
	condition = condition / 100
	
	itm:set_condition(condition)
	
	-- avoid creating ammo on reload
	local death_dropped = se_load_var(npc:id(), npc:name(), "death_dropped")
	if (death_dropped) then
		return
	end
	
	if (IsWeapon(nil,itm:clsid()) and not npc:marked_dropped(itm)) then
		-- Mags users need this to adjust the enemy magazines
		if magazines then
			-- This variable will allow us to get the correct ammo type when determining ammo to put in the magazine when looting
			local id = itm:id()
			if not magazine_binder.is_supported_weapon(itm) then
				magazine_binder.set_data(id, nil)
				return
			end
		
			if (magazine_binder.is_supported_weapon(itm) and not npc:marked_dropped(itm)) then
				cond_item = itm
				local id = itm:id()
				local sec = itm:section()
				local mag_sec = magazine_binder.weapon_default_magazine(sec)
				local ammo_table = magazine_binder.get_magazine_caliber(mag_sec)
				local rank = ranks.get_obj_rank_name(npc)
				print_dbg("Resetting mag data for weapon %s (%s)", id, itm:section())
				itm:unload_magazine()
				magazines_loot.random_pop_mag(id, mag_sec, ammo_table, rank)
				magazines.prep_weapon(itm, false)
			end
		end
		
		-- Loose ammo loot generation for all users
		local sec,number
		local ammo_class = parse_list(ini_sys,itm:section(),"ammo_class")
		
		-- randomly spawn only 1 ammo type per found weapon
		if (#ammo_class > 0) then
			sec = ammo_class[itm:get_ammo_type() + 1]
			print_dbg("[Set Wpn Drop Cond] Ammo to be given: %s", sec)
			if (sec and death_manager.item_count[sec]) then 
				number = math.random(death_manager.item_count[sec][1],death_manager. item_count[sec][2])
				if (number > 0 and ini_sys:section_exist(sec)) then
--					BaseDMCreate(sec, npc, {ammo = number})
					local loot_factor = (ui_mcm and ui_mcm.get('dph_loot_cond/ammo/factor')) or 1
					BaseDMCreate(sec, npc, {ammo = number * loot_factor})
				end
			end
		end
		-- spawn grenade ammo if there is launcher attached
		if (ini_sys:r_float_ex(itm:section(),"grenade_launcher_status") > 0) then
			ammo_class = parse_list(ini_sys,itm:section(),"grenade_class")
			for i=1,#ammo_class do
				sec = ammo_class[i]
				if (sec and death_manager.item_count[sec]) then 
					number = math.random(death_manager.item_count[sec][1], death_manager.item_count[sec][2])
					if (number > 0 and ini_sys:section_exist(sec)) then
						chance = math.random(0,100)
						if chance > 10 then
							BaseDMCreate(sec, npc, {ammo = number})
						end
					end
				end
			end
		end
		
		itm:set_ammo_elapsed(0)
	end
end

-- Essentially need to copy all of the Mags' "npc_on_death" function to fully be able to adjust the ammo
if magazines then
	local ini_loadouts = ini_file("items\\settings\\npc_mag_loadouts.ltx")
	-- death management
	function get_mag_prop(rank, prop)
		rank = rank or "novice"
		return ini_loadouts:r_float_ex(rank.."_mag_loadout", prop)
	end
	
	BaseNPCDeath = magazines_loot.npc_on_death
--	print_dbg('[MagsRankAmmo] Is Function Available? (%s)', BaseNPCDeath)
	if BaseNPCDeath then
		function magazines_loot.npc_on_death(npc, who)
			local rank = ranks.get_obj_rank_name(npc)
			local found_primary = false
			local found_secondary = false
			
			function itr_inv(temp, item)
				local sec = item:section()
				
				-- ensure to reset the variable to avoid incorrect ammo in the magazines
				weapon_item = nil
				if IsWeapon(nil,item:clsid()) and not npc:marked_dropped(item) and magazine_binder.is_supported_weapon(item) then
					-- spawn mags for one primary, one secondary
					-- This variable will allow us to get the correct ammo type when determining ammo to put in the magazine when looting
					weapon_item = item
					local is_sidearm = IsPistol(item)
					if (found_primary and not is_sidearm) or (found_secondary and is_sidearm) then return end
		
					-- reduce ammo in loaded weapon
					local id = item:id()
					local mag_data = magazine_binder.get_data(id)
					
					local mags_to_spawn = math.random(0, get_mag_prop(rank, "max_mags"))
					local mag_sec = magazine_binder.weapon_default_magazine(sec)
					local improved_mag_sec = magazine_binder.weapon_improved_magazine(sec)
					local mag_good_chance = get_mag_prop(rank, "mag_good_chance")
					local ammo_table = magazine_binder.get_magazine_caliber(mag_sec)
					local quality = magazines_mcm.get_config("deathquality") or 1
		
					print_dbg("Spawning %s mags for %s", mags_to_spawn, sec)
					for i=1,mags_to_spawn do
						local to_create = math.floor(quality * math.random(100)) <= mag_good_chance and improved_mag_sec or mag_sec
		
						print_dbg("Creating magazine %s", to_create)
						local new_mag = alife_create_item(to_create, npc)
						if new_mag then
							magazines_loot.random_pop_mag(new_mag.id, to_create, ammo_table, rank)
						end
					end
					
					-- reset variable as we don't want any issues with other weapon mag loot generation
					weapon_item = nil
					if is_sidearm then
						found_secondary = true
					else
						found_primary = true
					end
				end
			end
			npc:iterate_inventory(itr_inv, npc)
		end
	end
	
	-- We now use the variable/weapon to get the current ammo in the weapon and have that be the ammo in the looted magazines
	-- This gets called via "random_pop_mag" for looting purposes
	BaseMagsDetermineAmmo = magazines_loot.determine_ammo
	if BaseMagsDetermineAmmo then
		function magazines_loot.determine_ammo(ammo_to_pick, mag_sec, rank)
			-- npc_on_death ammo generation
			if (weapon_item) then
				ammo_class = utils_item.get_ammo(weapon_item:section(), weapon_item:id())
				-- change section to the correct ammo type
				if ammo_class and (#ammo_class > 0) then
					ammo_to_pick = ammo_class[weapon_item:get_ammo_type() + 1]
					print_dbg("[Mags Determine Ammo] Ammo to be given: %s", ammo_to_pick)
				end
				
			-- set_weapon_drop_condition ammo generation
			elseif (cond_item) then
				ammo_class = utils_item.get_ammo(cond_item:section(), cond_item:id())
				-- change section to the correct ammo type
				if ammo_class and (#ammo_class > 0) then
					ammo_to_pick = ammo_class[cond_item:get_ammo_type() + 1]
					print_dbg("[Mags Determine Ammo] Ammo to be given: %s", ammo_to_pick)
				end
			end
			
--			ammo_to_pick = bad_ammo_adjust(ammo_to_pick) or ammo_to_pick
			
			-- return BaseMagsDetermineAmmo(ammo_to_pick, mag_sec, rank)
			return ammo_to_pick
		end
	end
end

function on_option_change()
	local old_enalbed = enable_mod
	if ui_mcm and z_cxv_rank_based_ammo_usage_mcm then
		enable_mod = z_cxv_rank_based_ammo_usage_mcm.get_config("enabled")
		nerf_bs = z_cxv_rank_based_ammo_usage_mcm.get_config("nerf_bs")
		nerf_mm = z_cxv_rank_based_ammo_usage_mcm.get_config("nerf_mm")
		buff_south_after_bs = z_cxv_rank_based_ammo_usage_mcm.get_config("buff_south_after_bs")
		adjust_ammo_loot = z_cxv_rank_based_ammo_usage_mcm.get_config("adjust_ammo_loot")
		print_debug = z_cxv_rank_based_ammo_usage_mcm.get_config("print_debug")
	end
end

function on_game_start()
--	RegisterScriptCallback("npc_on_net_spawn", npc_on_net_spawn)
	RegisterScriptCallback("on_option_change", on_option_change)
	on_option_change()
	if enable_mod then
		RegisterScriptCallback("npc_on_net_spawn", npc_on_net_spawn)
		-- This mod does the same as ArtiBalls/ArtiGrok -- no need for them to be enabled
		if arti_ammo_utils then
			CreateTimeEvent("delay_disabling_arti_spawn", math.random(999), 0.1, function()
				UnregisterScriptCallback("npc_on_net_spawn", arti_ammo_utils.npc_on_net_spawn)
			end)
		end
	end
end